"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase/app");
var firebaseWebApi = require("nativescript-plugin-firebase/app");
// import { AngularFireModule } from 'angularfire2';
var ItemsComponent = (function () {
    function ItemsComponent() {
        // AngularFireModule.initializeApp({});
    }
    ItemsComponent.prototype.ngOnInit = function () {
        console.log("ngOnInit");
        firebase.initializeApp({
            persist: false
        }).then(function () { return console.log("Firebase initialized"); });
    };
    ItemsComponent.prototype.firestoreAdd = function () {
        firebase.firestore().collection("dogs").add({ name: "Fido" })
            .then(function (docRef) {
            console.log("Fido added, ref: " + docRef.id);
        })
            .catch(function (err) { return console.log("Adding Fido failed, error: " + err); });
    };
    ItemsComponent.prototype.firestoreSet = function () {
        firebase.firestore().collection("dogs").doc("fave")
            .set({ name: "Woofie", last: "lastofwoofie", date: new Date() }, { merge: true })
            .then(function () {
            console.log("Woofie set");
        })
            .catch(function (err) { return console.log("Setting Woofie failed, error: " + err); });
        // example from https://firebase.google.com/docs/firestore/query-data/get-data
        var citiesCollection = firebase.firestore().collection("cities");
        citiesCollection.doc("SF").set({
            name: "San Francisco",
            state: "CA",
            country: "USA",
            capital: false,
            population: 860000
        });
        citiesCollection.doc("LA").set({
            name: "Los Angeles",
            state: "CA",
            country: "USA",
            capital: false,
            population: 3900000
        });
        citiesCollection.doc("SAC").set({
            name: "Sacramento",
            state: "CA",
            country: "USA",
            capital: true,
            population: 500000
        });
        citiesCollection.doc("DC").set({
            name: "Washington, D.C.",
            state: "WA",
            country: "USA",
            capital: true,
            population: 680000
        });
        citiesCollection.doc("TOK").set({
            name: "Tokyo",
            state: null,
            country: "Japan",
            capital: true,
            population: 9000000
        });
        citiesCollection.doc("BJ").set({
            name: "Beijing",
            state: null,
            country: "China",
            capital: true,
            population: 21500000
        });
    };
    ItemsComponent.prototype.firestoreSetByAutoID = function () {
        firebase.firestore().collection("dogs").doc()
            .set({ name: "Woofie", last: "lastofwoofie", date: new Date() })
            .then(function () {
            console.log("Woofie set");
        })
            .catch(function (err) { return console.log("Setting Woofie failed, error: " + err); });
    };
    ItemsComponent.prototype.firestoreUpdate = function () {
        firebase.firestore().collection("dogs").doc("fave")
            .update({ name: "Woofieupdate", last: "updatedwoofie" })
            .then(function () {
            console.log("Woofie updated");
        })
            .catch(function (err) { return console.log("Updating Woofie failed, error: " + JSON.stringify(err)); });
    };
    ItemsComponent.prototype.firestoreGet = function () {
        var collectionRef = firebase.firestore().collection("dogs");
        collectionRef.get()
            .then(function (querySnapshot) {
            querySnapshot.forEach(function (doc) {
                console.log(doc.id + " => " + JSON.stringify(doc.data()));
            });
        })
            .catch(function (err) { return console.log("Get failed, error" + err); });
        // examples from https://firebase.google.com/docs/firestore/query-data/get-data
        var docRef = firebase.firestore().collection("cities").doc("BJ");
        docRef.get().then(function (doc) {
            if (doc.exists) {
                console.log("Document data:", JSON.stringify(doc.data()));
            }
            else {
                console.log("No such document!");
            }
        }).catch(function (error) {
            console.log("Error getting document:", error);
        });
    };
    ItemsComponent.prototype.firestoreGetNested = function () {
        var mainStreetInSFDocRef = firebase.firestore()
            .collection("cities")
            .doc("SF")
            .collection("streets")
            .doc("QZNrg22tkN8W71YC3qCb"); // id of 'main st.'
        mainStreetInSFDocRef.get().then(function (doc) {
            if (doc.exists) {
                console.log("Document data:", JSON.stringify(doc.data()));
            }
            else {
                console.log("No such document!");
            }
        }).catch(function (error) {
            console.log("Error getting document:", error);
        });
    };
    ItemsComponent.prototype.firestoreListen = function () {
        if (this.listenerUnsubscribe !== undefined) {
            console.log("Already listening ;)");
            return;
        }
        var docRef = firebase.firestore().collection("cities").doc("SF");
        this.listenerUnsubscribe = docRef.onSnapshot(function (doc) {
            if (doc.exists) {
                console.log("Document data:", JSON.stringify(doc.data()));
            }
            else {
                console.log("No such document!");
            }
        });
    };
    ItemsComponent.prototype.firestoreStopListening = function () {
        if (this.listenerUnsubscribe === undefined) {
            console.log("Please start listening first ;)");
            return;
        }
        this.listenerUnsubscribe();
        this.listenerUnsubscribe = undefined;
    };
    ItemsComponent.prototype.firestoreWhere = function () {
        var query = firebase.firestore().collection("cities")
            .where("state", "==", "CA")
            .where("population", "<", 550000);
        query
            .get()
            .then(function (querySnapshot) {
            querySnapshot.forEach(function (doc) {
                console.log("Relatively small Californian city: " + doc.id + " => " + JSON.stringify(doc.data()));
            });
        })
            .catch(function (err) { return console.log("Where-get failed, error" + err); });
    };
    ItemsComponent.prototype.firestoreWhereOrderLimit = function () {
        var query = firebase.firestore().collection("cities")
            .where("state", "==", "CA")
            .orderBy("population", "desc")
            .limit(2);
        query
            .get()
            .then(function (querySnapshot) {
            querySnapshot.forEach(function (doc) {
                console.log("Large Californian city: " + doc.id + " => " + JSON.stringify(doc.data()));
            });
        })
            .catch(function (err) { return console.log("firestoreWhereOrderLimit failed, error" + err); });
    };
    ItemsComponent.prototype.firestoreDelete = function () {
        firebase.firestore().collection("dogs").doc("fave")
            .delete()
            .then(function () {
            console.log("Woofie deleted");
        })
            .catch(function (err) { return console.log("Delete failed, error" + err); });
    };
    ItemsComponent.prototype.doWebGetValueForCompanies = function () {
        var path = "/owner";
        firebaseWebApi.database().ref(path)
            .once("value")
            .then(function (result) {
            console.log(result.key + " => " + JSON.stringify(result.val()));
        })
            .catch(function (error) { return console.log("doWebGetValueForCompanies error: " + error); });
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,